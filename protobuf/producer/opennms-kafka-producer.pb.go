// Source: https://github.com/OpenNMS/opennms/blob/master/features/kafka/producer/src/main/proto/opennms-kafka-producer.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: opennms-kafka-producer.proto

package producer

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The values differ from the standard codes in OpenNMS
// since proto3 enforces us to start at 0
type Severity int32

const (
	Severity_INDETERMINATE Severity = 0
	Severity_CLEARED       Severity = 1
	Severity_NORMAL        Severity = 2
	Severity_WARNING       Severity = 3
	Severity_MINOR         Severity = 4
	Severity_MAJOR         Severity = 5
	Severity_CRITICAL      Severity = 6
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "INDETERMINATE",
		1: "CLEARED",
		2: "NORMAL",
		3: "WARNING",
		4: "MINOR",
		5: "MAJOR",
		6: "CRITICAL",
	}
	Severity_value = map[string]int32{
		"INDETERMINATE": 0,
		"CLEARED":       1,
		"NORMAL":        2,
		"WARNING":       3,
		"MINOR":         4,
		"MAJOR":         5,
		"CRITICAL":      6,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_opennms_kafka_producer_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_opennms_kafka_producer_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{0}
}

type Alarm_Type int32

const (
	Alarm_PROBLEM_WITH_CLEAR    Alarm_Type = 0
	Alarm_CLEAR                 Alarm_Type = 1
	Alarm_PROBLEM_WITHOUT_CLEAR Alarm_Type = 2
)

// Enum value maps for Alarm_Type.
var (
	Alarm_Type_name = map[int32]string{
		0: "PROBLEM_WITH_CLEAR",
		1: "CLEAR",
		2: "PROBLEM_WITHOUT_CLEAR",
	}
	Alarm_Type_value = map[string]int32{
		"PROBLEM_WITH_CLEAR":    0,
		"CLEAR":                 1,
		"PROBLEM_WITHOUT_CLEAR": 2,
	}
)

func (x Alarm_Type) Enum() *Alarm_Type {
	p := new(Alarm_Type)
	*p = x
	return p
}

func (x Alarm_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alarm_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_opennms_kafka_producer_proto_enumTypes[1].Descriptor()
}

func (Alarm_Type) Type() protoreflect.EnumType {
	return &file_opennms_kafka_producer_proto_enumTypes[1]
}

func (x Alarm_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alarm_Type.Descriptor instead.
func (Alarm_Type) EnumDescriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{3, 0}
}

type AlarmFeedback_FeedbackType int32

const (
	AlarmFeedback_FALSE_POSITIVE AlarmFeedback_FeedbackType = 0
	AlarmFeedback_FALSE_NEGATIVE AlarmFeedback_FeedbackType = 1
	AlarmFeedback_CORRECT        AlarmFeedback_FeedbackType = 2
	AlarmFeedback_UNKNOWN        AlarmFeedback_FeedbackType = 3
)

// Enum value maps for AlarmFeedback_FeedbackType.
var (
	AlarmFeedback_FeedbackType_name = map[int32]string{
		0: "FALSE_POSITIVE",
		1: "FALSE_NEGATIVE",
		2: "CORRECT",
		3: "UNKNOWN",
	}
	AlarmFeedback_FeedbackType_value = map[string]int32{
		"FALSE_POSITIVE": 0,
		"FALSE_NEGATIVE": 1,
		"CORRECT":        2,
		"UNKNOWN":        3,
	}
)

func (x AlarmFeedback_FeedbackType) Enum() *AlarmFeedback_FeedbackType {
	p := new(AlarmFeedback_FeedbackType)
	*p = x
	return p
}

func (x AlarmFeedback_FeedbackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmFeedback_FeedbackType) Descriptor() protoreflect.EnumDescriptor {
	return file_opennms_kafka_producer_proto_enumTypes[2].Descriptor()
}

func (AlarmFeedback_FeedbackType) Type() protoreflect.EnumType {
	return &file_opennms_kafka_producer_proto_enumTypes[2]
}

func (x AlarmFeedback_FeedbackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmFeedback_FeedbackType.Descriptor instead.
func (AlarmFeedback_FeedbackType) EnumDescriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{4, 0}
}

type IpInterface_PrimaryType int32

const (
	IpInterface_PRIMARY      IpInterface_PrimaryType = 0
	IpInterface_SECONDARY    IpInterface_PrimaryType = 1
	IpInterface_NOT_ELIGIBLE IpInterface_PrimaryType = 2
)

// Enum value maps for IpInterface_PrimaryType.
var (
	IpInterface_PrimaryType_name = map[int32]string{
		0: "PRIMARY",
		1: "SECONDARY",
		2: "NOT_ELIGIBLE",
	}
	IpInterface_PrimaryType_value = map[string]int32{
		"PRIMARY":      0,
		"SECONDARY":    1,
		"NOT_ELIGIBLE": 2,
	}
)

func (x IpInterface_PrimaryType) Enum() *IpInterface_PrimaryType {
	p := new(IpInterface_PrimaryType)
	*p = x
	return p
}

func (x IpInterface_PrimaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpInterface_PrimaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_opennms_kafka_producer_proto_enumTypes[3].Descriptor()
}

func (IpInterface_PrimaryType) Type() protoreflect.EnumType {
	return &file_opennms_kafka_producer_proto_enumTypes[3]
}

func (x IpInterface_PrimaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpInterface_PrimaryType.Descriptor instead.
func (IpInterface_PrimaryType) EnumDescriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{5, 0}
}

type TopologyRef_Protocol int32

const (
	TopologyRef_LLDP        TopologyRef_Protocol = 0
	TopologyRef_OSPF        TopologyRef_Protocol = 1
	TopologyRef_ISIS        TopologyRef_Protocol = 2
	TopologyRef_BRIDGE      TopologyRef_Protocol = 3
	TopologyRef_CDP         TopologyRef_Protocol = 4
	TopologyRef_USERDEFINED TopologyRef_Protocol = 5
)

// Enum value maps for TopologyRef_Protocol.
var (
	TopologyRef_Protocol_name = map[int32]string{
		0: "LLDP",
		1: "OSPF",
		2: "ISIS",
		3: "BRIDGE",
		4: "CDP",
		5: "USERDEFINED",
	}
	TopologyRef_Protocol_value = map[string]int32{
		"LLDP":        0,
		"OSPF":        1,
		"ISIS":        2,
		"BRIDGE":      3,
		"CDP":         4,
		"USERDEFINED": 5,
	}
)

func (x TopologyRef_Protocol) Enum() *TopologyRef_Protocol {
	p := new(TopologyRef_Protocol)
	*p = x
	return p
}

func (x TopologyRef_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyRef_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_opennms_kafka_producer_proto_enumTypes[4].Descriptor()
}

func (TopologyRef_Protocol) Type() protoreflect.EnumType {
	return &file_opennms_kafka_producer_proto_enumTypes[4]
}

func (x TopologyRef_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyRef_Protocol.Descriptor instead.
func (TopologyRef_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{10, 0}
}

type NodeCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ForeignSource string `protobuf:"bytes,2,opt,name=foreign_source,json=foreignSource,proto3" json:"foreign_source,omitempty"`
	ForeignId     string `protobuf:"bytes,3,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
}

func (x *NodeCriteria) Reset() {
	*x = NodeCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCriteria) ProtoMessage() {}

func (x *NodeCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCriteria.ProtoReflect.Descriptor instead.
func (*NodeCriteria) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{0}
}

func (x *NodeCriteria) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeCriteria) GetForeignSource() string {
	if x != nil {
		return x.ForeignSource
	}
	return ""
}

func (x *NodeCriteria) GetForeignId() string {
	if x != nil {
		return x.ForeignId
	}
	return ""
}

type EventParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *EventParameter) Reset() {
	*x = EventParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventParameter) ProtoMessage() {}

func (x *EventParameter) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventParameter.ProtoReflect.Descriptor instead.
func (*EventParameter) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{1}
}

func (x *EventParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EventParameter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uei          string            `protobuf:"bytes,2,opt,name=uei,proto3" json:"uei,omitempty"`
	Label        string            `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Time         uint64            `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Source       string            `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Parameter    []*EventParameter `protobuf:"bytes,6,rep,name=parameter,proto3" json:"parameter,omitempty"`
	CreateTime   uint64            `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Description  string            `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	LogMessage   string            `protobuf:"bytes,9,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
	Severity     Severity          `protobuf:"varint,10,opt,name=severity,proto3,enum=Severity" json:"severity,omitempty"`
	Log          bool              `protobuf:"varint,11,opt,name=log,proto3" json:"log,omitempty"`
	Display      bool              `protobuf:"varint,12,opt,name=display,proto3" json:"display,omitempty"`
	NodeCriteria *NodeCriteria     `protobuf:"bytes,13,opt,name=node_criteria,json=nodeCriteria,proto3" json:"node_criteria,omitempty"`
	IpAddress    string            `protobuf:"bytes,14,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetUei() string {
	if x != nil {
		return x.Uei
	}
	return ""
}

func (x *Event) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Event) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetParameter() []*EventParameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *Event) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Event) GetLogMessage() string {
	if x != nil {
		return x.LogMessage
	}
	return ""
}

func (x *Event) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_INDETERMINATE
}

func (x *Event) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *Event) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *Event) GetNodeCriteria() *NodeCriteria {
	if x != nil {
		return x.NodeCriteria
	}
	return nil
}

func (x *Event) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type Alarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uei                   string        `protobuf:"bytes,2,opt,name=uei,proto3" json:"uei,omitempty"`
	NodeCriteria          *NodeCriteria `protobuf:"bytes,3,opt,name=node_criteria,json=nodeCriteria,proto3" json:"node_criteria,omitempty"`
	IpAddress             string        `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	ServiceName           string        `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ReductionKey          string        `protobuf:"bytes,6,opt,name=reduction_key,json=reductionKey,proto3" json:"reduction_key,omitempty"`
	Type                  Alarm_Type    `protobuf:"varint,7,opt,name=type,proto3,enum=Alarm_Type" json:"type,omitempty"`
	Count                 uint64        `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Severity              Severity      `protobuf:"varint,9,opt,name=severity,proto3,enum=Severity" json:"severity,omitempty"`
	FirstEventTime        uint64        `protobuf:"varint,10,opt,name=first_event_time,json=firstEventTime,proto3" json:"first_event_time,omitempty"`
	Description           string        `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	LogMessage            string        `protobuf:"bytes,12,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
	AckUser               string        `protobuf:"bytes,13,opt,name=ack_user,json=ackUser,proto3" json:"ack_user,omitempty"`
	AckTime               uint64        `protobuf:"varint,14,opt,name=ack_time,json=ackTime,proto3" json:"ack_time,omitempty"`
	LastEvent             *Event        `protobuf:"bytes,15,opt,name=last_event,json=lastEvent,proto3" json:"last_event,omitempty"`
	LastEventTime         uint64        `protobuf:"varint,16,opt,name=last_event_time,json=lastEventTime,proto3" json:"last_event_time,omitempty"`
	IfIndex               uint32        `protobuf:"varint,17,opt,name=if_index,json=ifIndex,proto3" json:"if_index,omitempty"`
	OperatorInstructions  string        `protobuf:"bytes,18,opt,name=operator_instructions,json=operatorInstructions,proto3" json:"operator_instructions,omitempty"`
	ClearKey              string        `protobuf:"bytes,19,opt,name=clear_key,json=clearKey,proto3" json:"clear_key,omitempty"`
	ManagedObjectInstance string        `protobuf:"bytes,20,opt,name=managed_object_instance,json=managedObjectInstance,proto3" json:"managed_object_instance,omitempty"`
	ManagedObjectType     string        `protobuf:"bytes,21,opt,name=managed_object_type,json=managedObjectType,proto3" json:"managed_object_type,omitempty"`
	RelatedAlarm          []*Alarm      `protobuf:"bytes,22,rep,name=relatedAlarm,proto3" json:"relatedAlarm,omitempty"`
}

func (x *Alarm) Reset() {
	*x = Alarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alarm) ProtoMessage() {}

func (x *Alarm) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alarm.ProtoReflect.Descriptor instead.
func (*Alarm) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{3}
}

func (x *Alarm) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Alarm) GetUei() string {
	if x != nil {
		return x.Uei
	}
	return ""
}

func (x *Alarm) GetNodeCriteria() *NodeCriteria {
	if x != nil {
		return x.NodeCriteria
	}
	return nil
}

func (x *Alarm) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Alarm) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Alarm) GetReductionKey() string {
	if x != nil {
		return x.ReductionKey
	}
	return ""
}

func (x *Alarm) GetType() Alarm_Type {
	if x != nil {
		return x.Type
	}
	return Alarm_PROBLEM_WITH_CLEAR
}

func (x *Alarm) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Alarm) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_INDETERMINATE
}

func (x *Alarm) GetFirstEventTime() uint64 {
	if x != nil {
		return x.FirstEventTime
	}
	return 0
}

func (x *Alarm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Alarm) GetLogMessage() string {
	if x != nil {
		return x.LogMessage
	}
	return ""
}

func (x *Alarm) GetAckUser() string {
	if x != nil {
		return x.AckUser
	}
	return ""
}

func (x *Alarm) GetAckTime() uint64 {
	if x != nil {
		return x.AckTime
	}
	return 0
}

func (x *Alarm) GetLastEvent() *Event {
	if x != nil {
		return x.LastEvent
	}
	return nil
}

func (x *Alarm) GetLastEventTime() uint64 {
	if x != nil {
		return x.LastEventTime
	}
	return 0
}

func (x *Alarm) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Alarm) GetOperatorInstructions() string {
	if x != nil {
		return x.OperatorInstructions
	}
	return ""
}

func (x *Alarm) GetClearKey() string {
	if x != nil {
		return x.ClearKey
	}
	return ""
}

func (x *Alarm) GetManagedObjectInstance() string {
	if x != nil {
		return x.ManagedObjectInstance
	}
	return ""
}

func (x *Alarm) GetManagedObjectType() string {
	if x != nil {
		return x.ManagedObjectType
	}
	return ""
}

func (x *Alarm) GetRelatedAlarm() []*Alarm {
	if x != nil {
		return x.RelatedAlarm
	}
	return nil
}

type AlarmFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SituationKey         string                     `protobuf:"bytes,1,opt,name=situation_key,json=situationKey,proto3" json:"situation_key,omitempty"`
	SituationFingerprint string                     `protobuf:"bytes,2,opt,name=situation_fingerprint,json=situationFingerprint,proto3" json:"situation_fingerprint,omitempty"`
	AlarmKey             string                     `protobuf:"bytes,3,opt,name=alarm_key,json=alarmKey,proto3" json:"alarm_key,omitempty"`
	FeedbackType         AlarmFeedback_FeedbackType `protobuf:"varint,4,opt,name=feedback_type,json=feedbackType,proto3,enum=AlarmFeedback_FeedbackType" json:"feedback_type,omitempty"`
	Reason               string                     `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	User                 string                     `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Timestamp            uint64                     `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AlarmFeedback) Reset() {
	*x = AlarmFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmFeedback) ProtoMessage() {}

func (x *AlarmFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmFeedback.ProtoReflect.Descriptor instead.
func (*AlarmFeedback) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{4}
}

func (x *AlarmFeedback) GetSituationKey() string {
	if x != nil {
		return x.SituationKey
	}
	return ""
}

func (x *AlarmFeedback) GetSituationFingerprint() string {
	if x != nil {
		return x.SituationFingerprint
	}
	return ""
}

func (x *AlarmFeedback) GetAlarmKey() string {
	if x != nil {
		return x.AlarmKey
	}
	return ""
}

func (x *AlarmFeedback) GetFeedbackType() AlarmFeedback_FeedbackType {
	if x != nil {
		return x.FeedbackType
	}
	return AlarmFeedback_FALSE_POSITIVE
}

func (x *AlarmFeedback) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AlarmFeedback) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AlarmFeedback) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type IpInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IpAddress   string                  `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	IfIndex     uint32                  `protobuf:"varint,3,opt,name=if_index,json=ifIndex,proto3" json:"if_index,omitempty"`
	PrimaryType IpInterface_PrimaryType `protobuf:"varint,4,opt,name=primary_type,json=primaryType,proto3,enum=IpInterface_PrimaryType" json:"primary_type,omitempty"`
	Service     []string                `protobuf:"bytes,5,rep,name=service,proto3" json:"service,omitempty"`
}

func (x *IpInterface) Reset() {
	*x = IpInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpInterface) ProtoMessage() {}

func (x *IpInterface) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpInterface.ProtoReflect.Descriptor instead.
func (*IpInterface) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{5}
}

func (x *IpInterface) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IpInterface) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *IpInterface) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *IpInterface) GetPrimaryType() IpInterface_PrimaryType {
	if x != nil {
		return x.PrimaryType
	}
	return IpInterface_PRIMARY
}

func (x *IpInterface) GetService() []string {
	if x != nil {
		return x.Service
	}
	return nil
}

type SnmpInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IfIndex       uint32 `protobuf:"varint,2,opt,name=if_index,json=ifIndex,proto3" json:"if_index,omitempty"`
	IfDescr       string `protobuf:"bytes,3,opt,name=if_descr,json=ifDescr,proto3" json:"if_descr,omitempty"`
	IfType        uint32 `protobuf:"varint,4,opt,name=if_type,json=ifType,proto3" json:"if_type,omitempty"`
	IfName        string `protobuf:"bytes,5,opt,name=if_name,json=ifName,proto3" json:"if_name,omitempty"`
	IfSpeed       uint64 `protobuf:"varint,6,opt,name=if_speed,json=ifSpeed,proto3" json:"if_speed,omitempty"`
	IfPhysAddress string `protobuf:"bytes,7,opt,name=if_phys_address,json=ifPhysAddress,proto3" json:"if_phys_address,omitempty"`
	IfAdminStatus uint32 `protobuf:"varint,8,opt,name=if_admin_status,json=ifAdminStatus,proto3" json:"if_admin_status,omitempty"`
	IfOperStatus  uint32 `protobuf:"varint,9,opt,name=if_oper_status,json=ifOperStatus,proto3" json:"if_oper_status,omitempty"`
	IfAlias       string `protobuf:"bytes,10,opt,name=if_alias,json=ifAlias,proto3" json:"if_alias,omitempty"`
}

func (x *SnmpInterface) Reset() {
	*x = SnmpInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpInterface) ProtoMessage() {}

func (x *SnmpInterface) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpInterface.ProtoReflect.Descriptor instead.
func (*SnmpInterface) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{6}
}

func (x *SnmpInterface) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SnmpInterface) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *SnmpInterface) GetIfDescr() string {
	if x != nil {
		return x.IfDescr
	}
	return ""
}

func (x *SnmpInterface) GetIfType() uint32 {
	if x != nil {
		return x.IfType
	}
	return 0
}

func (x *SnmpInterface) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *SnmpInterface) GetIfSpeed() uint64 {
	if x != nil {
		return x.IfSpeed
	}
	return 0
}

func (x *SnmpInterface) GetIfPhysAddress() string {
	if x != nil {
		return x.IfPhysAddress
	}
	return ""
}

func (x *SnmpInterface) GetIfAdminStatus() uint32 {
	if x != nil {
		return x.IfAdminStatus
	}
	return 0
}

func (x *SnmpInterface) GetIfOperStatus() uint32 {
	if x != nil {
		return x.IfOperStatus
	}
	return 0
}

func (x *SnmpInterface) GetIfAlias() string {
	if x != nil {
		return x.IfAlias
	}
	return ""
}

type HwAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Oid   string `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *HwAlias) Reset() {
	*x = HwAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwAlias) ProtoMessage() {}

func (x *HwAlias) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwAlias.ProtoReflect.Descriptor instead.
func (*HwAlias) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{7}
}

func (x *HwAlias) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *HwAlias) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

type HwEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntPhysicalIndex      uint32      `protobuf:"varint,1,opt,name=ent_physical_index,json=entPhysicalIndex,proto3" json:"ent_physical_index,omitempty"`
	EntityId              uint32      `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EntPhysicalClass      string      `protobuf:"bytes,3,opt,name=ent_physical_class,json=entPhysicalClass,proto3" json:"ent_physical_class,omitempty"`
	EntPhysicalDescr      string      `protobuf:"bytes,4,opt,name=ent_physical_descr,json=entPhysicalDescr,proto3" json:"ent_physical_descr,omitempty"`
	EntPhysicalIsFru      bool        `protobuf:"varint,5,opt,name=ent_physical_is_fru,json=entPhysicalIsFru,proto3" json:"ent_physical_is_fru,omitempty"`
	EntPhysicalName       string      `protobuf:"bytes,6,opt,name=ent_physical_name,json=entPhysicalName,proto3" json:"ent_physical_name,omitempty"`
	EntPhysicalVendorType string      `protobuf:"bytes,7,opt,name=ent_physical_vendor_type,json=entPhysicalVendorType,proto3" json:"ent_physical_vendor_type,omitempty"`
	EntHwAlias            []*HwAlias  `protobuf:"bytes,8,rep,name=ent_hw_alias,json=entHwAlias,proto3" json:"ent_hw_alias,omitempty"`
	Children              []*HwEntity `protobuf:"bytes,9,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *HwEntity) Reset() {
	*x = HwEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwEntity) ProtoMessage() {}

func (x *HwEntity) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwEntity.ProtoReflect.Descriptor instead.
func (*HwEntity) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{8}
}

func (x *HwEntity) GetEntPhysicalIndex() uint32 {
	if x != nil {
		return x.EntPhysicalIndex
	}
	return 0
}

func (x *HwEntity) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *HwEntity) GetEntPhysicalClass() string {
	if x != nil {
		return x.EntPhysicalClass
	}
	return ""
}

func (x *HwEntity) GetEntPhysicalDescr() string {
	if x != nil {
		return x.EntPhysicalDescr
	}
	return ""
}

func (x *HwEntity) GetEntPhysicalIsFru() bool {
	if x != nil {
		return x.EntPhysicalIsFru
	}
	return false
}

func (x *HwEntity) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwEntity) GetEntPhysicalVendorType() string {
	if x != nil {
		return x.EntPhysicalVendorType
	}
	return ""
}

func (x *HwEntity) GetEntHwAlias() []*HwAlias {
	if x != nil {
		return x.EntHwAlias
	}
	return nil
}

func (x *HwEntity) GetChildren() []*HwEntity {
	if x != nil {
		return x.Children
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ForeignSource  string           `protobuf:"bytes,2,opt,name=foreign_source,json=foreignSource,proto3" json:"foreign_source,omitempty"`
	ForeignId      string           `protobuf:"bytes,3,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	Location       string           `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Category       []string         `protobuf:"bytes,5,rep,name=category,proto3" json:"category,omitempty"`
	Label          string           `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	CreateTime     uint64           `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	SysContact     string           `protobuf:"bytes,8,opt,name=sys_contact,json=sysContact,proto3" json:"sys_contact,omitempty"`
	SysDescription string           `protobuf:"bytes,9,opt,name=sys_description,json=sysDescription,proto3" json:"sys_description,omitempty"`
	SysObjectId    string           `protobuf:"bytes,10,opt,name=sys_object_id,json=sysObjectId,proto3" json:"sys_object_id,omitempty"`
	IpInterface    []*IpInterface   `protobuf:"bytes,11,rep,name=ip_interface,json=ipInterface,proto3" json:"ip_interface,omitempty"`
	SnmpInterface  []*SnmpInterface `protobuf:"bytes,12,rep,name=snmp_interface,json=snmpInterface,proto3" json:"snmp_interface,omitempty"`
	HwInventory    *HwEntity        `protobuf:"bytes,13,opt,name=hw_inventory,json=hwInventory,proto3" json:"hw_inventory,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{9}
}

func (x *Node) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetForeignSource() string {
	if x != nil {
		return x.ForeignSource
	}
	return ""
}

func (x *Node) GetForeignId() string {
	if x != nil {
		return x.ForeignId
	}
	return ""
}

func (x *Node) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Node) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Node) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Node) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Node) GetSysContact() string {
	if x != nil {
		return x.SysContact
	}
	return ""
}

func (x *Node) GetSysDescription() string {
	if x != nil {
		return x.SysDescription
	}
	return ""
}

func (x *Node) GetSysObjectId() string {
	if x != nil {
		return x.SysObjectId
	}
	return ""
}

func (x *Node) GetIpInterface() []*IpInterface {
	if x != nil {
		return x.IpInterface
	}
	return nil
}

func (x *Node) GetSnmpInterface() []*SnmpInterface {
	if x != nil {
		return x.SnmpInterface
	}
	return nil
}

func (x *Node) GetHwInventory() *HwEntity {
	if x != nil {
		return x.HwInventory
	}
	return nil
}

type TopologyRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Protocol TopologyRef_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=TopologyRef_Protocol" json:"protocol,omitempty"`
}

func (x *TopologyRef) Reset() {
	*x = TopologyRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyRef) ProtoMessage() {}

func (x *TopologyRef) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyRef.ProtoReflect.Descriptor instead.
func (*TopologyRef) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{10}
}

func (x *TopologyRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TopologyRef) GetProtocol() TopologyRef_Protocol {
	if x != nil {
		return x.Protocol
	}
	return TopologyRef_LLDP
}

type TopologySegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *TopologyRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *TopologySegment) Reset() {
	*x = TopologySegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologySegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologySegment) ProtoMessage() {}

func (x *TopologySegment) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologySegment.ProtoReflect.Descriptor instead.
func (*TopologySegment) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{11}
}

func (x *TopologySegment) GetRef() *TopologyRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

type TopologyPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VertexId     string        `protobuf:"bytes,1,opt,name=vertex_id,json=vertexId,proto3" json:"vertex_id,omitempty"`
	IfIndex      uint64        `protobuf:"varint,2,opt,name=if_index,json=ifIndex,proto3" json:"if_index,omitempty"`
	IfName       string        `protobuf:"bytes,3,opt,name=if_name,json=ifName,proto3" json:"if_name,omitempty"`
	Address      string        `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	NodeCriteria *NodeCriteria `protobuf:"bytes,5,opt,name=node_criteria,json=nodeCriteria,proto3" json:"node_criteria,omitempty"`
}

func (x *TopologyPort) Reset() {
	*x = TopologyPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyPort) ProtoMessage() {}

func (x *TopologyPort) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyPort.ProtoReflect.Descriptor instead.
func (*TopologyPort) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{12}
}

func (x *TopologyPort) GetVertexId() string {
	if x != nil {
		return x.VertexId
	}
	return ""
}

func (x *TopologyPort) GetIfIndex() uint64 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *TopologyPort) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *TopologyPort) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TopologyPort) GetNodeCriteria() *NodeCriteria {
	if x != nil {
		return x.NodeCriteria
	}
	return nil
}

type TopologyEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *TopologyRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Types that are assignable to Source:
	//	*TopologyEdge_SourcePort
	//	*TopologyEdge_SourceSegment
	//	*TopologyEdge_SourceNode
	Source isTopologyEdge_Source `protobuf_oneof:"source"`
	// Types that are assignable to Target:
	//	*TopologyEdge_TargetPort
	//	*TopologyEdge_TargetSegment
	//	*TopologyEdge_TargetNode
	Target isTopologyEdge_Target `protobuf_oneof:"target"`
}

func (x *TopologyEdge) Reset() {
	*x = TopologyEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opennms_kafka_producer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyEdge) ProtoMessage() {}

func (x *TopologyEdge) ProtoReflect() protoreflect.Message {
	mi := &file_opennms_kafka_producer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyEdge.ProtoReflect.Descriptor instead.
func (*TopologyEdge) Descriptor() ([]byte, []int) {
	return file_opennms_kafka_producer_proto_rawDescGZIP(), []int{13}
}

func (x *TopologyEdge) GetRef() *TopologyRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (m *TopologyEdge) GetSource() isTopologyEdge_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *TopologyEdge) GetSourcePort() *TopologyPort {
	if x, ok := x.GetSource().(*TopologyEdge_SourcePort); ok {
		return x.SourcePort
	}
	return nil
}

func (x *TopologyEdge) GetSourceSegment() *TopologySegment {
	if x, ok := x.GetSource().(*TopologyEdge_SourceSegment); ok {
		return x.SourceSegment
	}
	return nil
}

func (x *TopologyEdge) GetSourceNode() *Node {
	if x, ok := x.GetSource().(*TopologyEdge_SourceNode); ok {
		return x.SourceNode
	}
	return nil
}

func (m *TopologyEdge) GetTarget() isTopologyEdge_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *TopologyEdge) GetTargetPort() *TopologyPort {
	if x, ok := x.GetTarget().(*TopologyEdge_TargetPort); ok {
		return x.TargetPort
	}
	return nil
}

func (x *TopologyEdge) GetTargetSegment() *TopologySegment {
	if x, ok := x.GetTarget().(*TopologyEdge_TargetSegment); ok {
		return x.TargetSegment
	}
	return nil
}

func (x *TopologyEdge) GetTargetNode() *Node {
	if x, ok := x.GetTarget().(*TopologyEdge_TargetNode); ok {
		return x.TargetNode
	}
	return nil
}

type isTopologyEdge_Source interface {
	isTopologyEdge_Source()
}

type TopologyEdge_SourcePort struct {
	SourcePort *TopologyPort `protobuf:"bytes,3,opt,name=sourcePort,proto3,oneof"`
}

type TopologyEdge_SourceSegment struct {
	SourceSegment *TopologySegment `protobuf:"bytes,4,opt,name=sourceSegment,proto3,oneof"`
}

type TopologyEdge_SourceNode struct {
	SourceNode *Node `protobuf:"bytes,5,opt,name=sourceNode,proto3,oneof"`
}

func (*TopologyEdge_SourcePort) isTopologyEdge_Source() {}

func (*TopologyEdge_SourceSegment) isTopologyEdge_Source() {}

func (*TopologyEdge_SourceNode) isTopologyEdge_Source() {}

type isTopologyEdge_Target interface {
	isTopologyEdge_Target()
}

type TopologyEdge_TargetPort struct {
	TargetPort *TopologyPort `protobuf:"bytes,6,opt,name=targetPort,proto3,oneof"`
}

type TopologyEdge_TargetSegment struct {
	TargetSegment *TopologySegment `protobuf:"bytes,7,opt,name=targetSegment,proto3,oneof"`
}

type TopologyEdge_TargetNode struct {
	TargetNode *Node `protobuf:"bytes,8,opt,name=targetNode,proto3,oneof"`
}

func (*TopologyEdge_TargetPort) isTopologyEdge_Target() {}

func (*TopologyEdge_TargetSegment) isTopologyEdge_Target() {}

func (*TopologyEdge_TargetNode) isTopologyEdge_Target() {}

var File_opennms_kafka_producer_proto protoreflect.FileDescriptor

var file_opennms_kafka_producer_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6f, 0x70, 0x65, 0x6e, 0x6e, 0x6d, 0x73, 0x2d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64,
	0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x65, 0x69,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdb, 0x06, 0x0a, 0x05,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x65, 0x69, 0x12, 0x32, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a,
	0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x22, 0x44, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55,
	0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x02, 0x22, 0xe4, 0x02, 0x0a, 0x0d, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x33, 0x0a, 0x15, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4b,
	0x65, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x50,
	0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03,
	0x22, 0xeb, 0x01, 0x0a, 0x0b, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x69, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x22, 0xb3,
	0x02, 0x0a, 0x0d, 0x53, 0x6e, 0x6d, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x69, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x66, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x66, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x66,
	0x50, 0x68, 0x79, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x66, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x66, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x66, 0x4f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x22, 0x31, 0x0a, 0x07, 0x48, 0x77, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x98, 0x03, 0x0a, 0x08, 0x48, 0x77, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x74,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x66,
	0x72, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x73, 0x46, 0x72, 0x75, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x77, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x48, 0x77, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x48, 0x77, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x48, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0xcf, 0x03, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x79,
	0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x0b, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x0e, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x6e, 0x6d, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x6e, 0x6d, 0x70, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x68, 0x77, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x48,
	0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x68, 0x77, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x52, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x52, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x4e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4c, 0x44, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x53, 0x50, 0x46, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x53, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x44, 0x50, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x22, 0x31, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x66, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0xea, 0x02, 0x0a, 0x0c, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x45, 0x64, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x6f,
	0x72, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x38, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2a, 0x67, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x44, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x06,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opennms_kafka_producer_proto_rawDescOnce sync.Once
	file_opennms_kafka_producer_proto_rawDescData = file_opennms_kafka_producer_proto_rawDesc
)

func file_opennms_kafka_producer_proto_rawDescGZIP() []byte {
	file_opennms_kafka_producer_proto_rawDescOnce.Do(func() {
		file_opennms_kafka_producer_proto_rawDescData = protoimpl.X.CompressGZIP(file_opennms_kafka_producer_proto_rawDescData)
	})
	return file_opennms_kafka_producer_proto_rawDescData
}

var file_opennms_kafka_producer_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_opennms_kafka_producer_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_opennms_kafka_producer_proto_goTypes = []interface{}{
	(Severity)(0),                   // 0: Severity
	(Alarm_Type)(0),                 // 1: Alarm.Type
	(AlarmFeedback_FeedbackType)(0), // 2: AlarmFeedback.FeedbackType
	(IpInterface_PrimaryType)(0),    // 3: IpInterface.PrimaryType
	(TopologyRef_Protocol)(0),       // 4: TopologyRef.Protocol
	(*NodeCriteria)(nil),            // 5: NodeCriteria
	(*EventParameter)(nil),          // 6: EventParameter
	(*Event)(nil),                   // 7: Event
	(*Alarm)(nil),                   // 8: Alarm
	(*AlarmFeedback)(nil),           // 9: AlarmFeedback
	(*IpInterface)(nil),             // 10: IpInterface
	(*SnmpInterface)(nil),           // 11: SnmpInterface
	(*HwAlias)(nil),                 // 12: HwAlias
	(*HwEntity)(nil),                // 13: HwEntity
	(*Node)(nil),                    // 14: Node
	(*TopologyRef)(nil),             // 15: TopologyRef
	(*TopologySegment)(nil),         // 16: TopologySegment
	(*TopologyPort)(nil),            // 17: TopologyPort
	(*TopologyEdge)(nil),            // 18: TopologyEdge
}
var file_opennms_kafka_producer_proto_depIdxs = []int32{
	6,  // 0: Event.parameter:type_name -> EventParameter
	0,  // 1: Event.severity:type_name -> Severity
	5,  // 2: Event.node_criteria:type_name -> NodeCriteria
	5,  // 3: Alarm.node_criteria:type_name -> NodeCriteria
	1,  // 4: Alarm.type:type_name -> Alarm.Type
	0,  // 5: Alarm.severity:type_name -> Severity
	7,  // 6: Alarm.last_event:type_name -> Event
	8,  // 7: Alarm.relatedAlarm:type_name -> Alarm
	2,  // 8: AlarmFeedback.feedback_type:type_name -> AlarmFeedback.FeedbackType
	3,  // 9: IpInterface.primary_type:type_name -> IpInterface.PrimaryType
	12, // 10: HwEntity.ent_hw_alias:type_name -> HwAlias
	13, // 11: HwEntity.children:type_name -> HwEntity
	10, // 12: Node.ip_interface:type_name -> IpInterface
	11, // 13: Node.snmp_interface:type_name -> SnmpInterface
	13, // 14: Node.hw_inventory:type_name -> HwEntity
	4,  // 15: TopologyRef.protocol:type_name -> TopologyRef.Protocol
	15, // 16: TopologySegment.ref:type_name -> TopologyRef
	5,  // 17: TopologyPort.node_criteria:type_name -> NodeCriteria
	15, // 18: TopologyEdge.ref:type_name -> TopologyRef
	17, // 19: TopologyEdge.sourcePort:type_name -> TopologyPort
	16, // 20: TopologyEdge.sourceSegment:type_name -> TopologySegment
	14, // 21: TopologyEdge.sourceNode:type_name -> Node
	17, // 22: TopologyEdge.targetPort:type_name -> TopologyPort
	16, // 23: TopologyEdge.targetSegment:type_name -> TopologySegment
	14, // 24: TopologyEdge.targetNode:type_name -> Node
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_opennms_kafka_producer_proto_init() }
func file_opennms_kafka_producer_proto_init() {
	if File_opennms_kafka_producer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opennms_kafka_producer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologySegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opennms_kafka_producer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_opennms_kafka_producer_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*TopologyEdge_SourcePort)(nil),
		(*TopologyEdge_SourceSegment)(nil),
		(*TopologyEdge_SourceNode)(nil),
		(*TopologyEdge_TargetPort)(nil),
		(*TopologyEdge_TargetSegment)(nil),
		(*TopologyEdge_TargetNode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opennms_kafka_producer_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opennms_kafka_producer_proto_goTypes,
		DependencyIndexes: file_opennms_kafka_producer_proto_depIdxs,
		EnumInfos:         file_opennms_kafka_producer_proto_enumTypes,
		MessageInfos:      file_opennms_kafka_producer_proto_msgTypes,
	}.Build()
	File_opennms_kafka_producer_proto = out.File
	file_opennms_kafka_producer_proto_rawDesc = nil
	file_opennms_kafka_producer_proto_goTypes = nil
	file_opennms_kafka_producer_proto_depIdxs = nil
}
